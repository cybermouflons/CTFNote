#import "./Profile.graphql"

# Fragments

fragment WorkingOnFragment on WorkOnTask {
  nodeId
  profileId
  active
  taskId
}

fragment TaskFragment on Task {
  nodeId
  id
  title
  ctfId
  padUrl
  description
  files
  flag
  solved
  assignedTags {
    nodes {
      ...AssignedTagsFragment
    }
  }
  workOnTasks {
    nodes {
      ...WorkingOnFragment
    }
  }
}

# Queries
query getTasksForCtfId($ctfId: Int!) {
  tasks(condition: { ctfId: $ctfId }) {
    nodes {
      ...TaskFragment
    }
  }
}

query taskById($id: Int!) {
  task(id: $id) {
    ...TaskFragment
  }
}

# Mutations

mutation updateTask(
  $id: Int!
  $title: String
  $description: String
  $files: String
  $flag: String
) {
  updateTask(
    input: {
      id: $id
      patch: {
        title: $title
        description: $description
        files: $files
        flag: $flag
      }
    }
  ) {
    task {
      ...TaskFragment
    }
  }
}

mutation createTaskForCtfId(
  $ctfId: Int!
  $title: String!
  $tags: [String]
  $description: String
  $files: String
  $flag: String
) {
  createTask(
    input: {
      ctfId: $ctfId
      title: $title
      tags: $tags
      description: $description
      files: $files
      flag: $flag
    }
  ) {
    task {
      ...TaskFragment
    }
  }
}

mutation deleteTask($id: Int!) {
  deleteTask(input: { id: $id }) {
    deletedTaskNodeId
  }
}

mutation startWorkingOn($taskId: Int!) {
  startWorkingOn(input: { taskId: $taskId }) {
    task {
      ...TaskFragment
    }
  }
}
mutation stopWorkingOn($taskId: Int!) {
  stopWorkingOn(input: { taskId: $taskId }) {
    task {
      ...TaskFragment
    }
  }
}

mutation cancelWorkingOn($taskId: Int!) {
  cancelWorkingOn(input: { taskId: $taskId }) {
    task {
      ...TaskFragment
    }
  }
}

# Subscriptions
subscription subscribeToTask {
  listen(topic: "update:tasks") {
    relatedNode {
      nodeId
      ... on Task {
        ...TaskFragment
      }
    }
  }
}
